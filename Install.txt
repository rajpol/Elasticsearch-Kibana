
The Elastic Stack components are not available through the package manager by default, but you can install them with yum by adding Elastic's package repository.

########
Yum repo
########


#vim /etc/yum.repo.d/elastic.repo

[Elastic search 6.x]
name=Elastic Stack repository for 6.x packages
baseurl=https://artifacts.elastic.co/packages/6.x/yum
gpgcheck=1
gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
enabled=1
autorefresh=1
type=rpm-md


#yum repolist


#####
Java
#####



#yum install java-1.8.0-openjdk -y




#############
Elasticsearch
#############



#yum install elasticsearch -y

#systemctl enable elasticsearch

#systemctl start elasticsearch

#vi /etc/elasticsearch/elasticsearch.yml

. . .
network.host: localhost
. . .

#curl -X GET "localhost:9200"

########
Kibana
#########



#yum install kibana -y

#systemctl enable kibana

#systemctl start kibana


To access kibana from localhost you need to tunnel local 5601 port to remote server localhost:5601

ssh user@your_public_ip_here -L 5601:localhost:5601

http://localhost:5601


Alternatly as Kibana is configured to only listen on localhost, we must set up a reverse proxy to allow external access to it. We can use Nginx for this purpose, which should already be installed on your server.



The following command will create the administrative Kibana user and password, and store them in the htpasswd.users file. You will configure Nginx to require this username and password and read this file momentarily:

#echo "kibanaadminuser:`openssl passwd -apr1`" | sudo tee -a /etc/nginx/htpasswd.users


Enter and confirm a password at the prompt. Remember or take note of this login, as you will need it to access the Kibana web interface.


#sudo vi /etc/nginx/conf.d/kibanalog.com.conf


server {
    listen 80;
    server_name kibanalog.com www.kibanalog.com;

    auth_basic "Restricted Access";
    auth_basic_user_file /etc/nginx/htpasswd.users;

    location / {
        proxy_pass http://localhost:5601;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

}


Restart ngnix if no errors found

#sudo nginx -t
#systemctl restart nginx

http://your_server_ip/status

##########
Firewall
##########

9200, TCP, Elasticsearch HTTP REST endpoint
9300, TCP, Elasticsearch cluster communication (not required if there is only one server)
5601 TCP, Kibana (web interface)


